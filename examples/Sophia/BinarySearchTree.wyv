name TreeType {z => 
  type A <= Top
  def compare (a : z.A, b : z.A) : Int
}
@shape name Tree {z => 
  type T <= TreeType
  def insert (elt : z.T) : Tree{type T <= z.T}
}
name Leaf {z => 
  type T <= TreeType
  def insert (elt : z.T) : Tree{type T <= z.T}
}
name Node {z =>
  type T <= TreeType
  val cur:z.T
  val left : Tree {type T <= z.T}
  val right : Tree {type T <= z.T}
  def insert (elt : z.T) : Tree{type T <= z.T}

}


subtype Leaf <: Tree
subtype Node <: Tree

name Utils {u => 
  def makeEmpty(a : TreeType) : Tree {type T <= a.A}
  def makeTree(a : TreeType, l:Tree, r:Tree): Node {type T <= a.A}
}



Top