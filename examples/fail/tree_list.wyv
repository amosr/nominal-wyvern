// Should fail
name Eq { z =>
  type E >= Bot
}

name List { z =>
  type T <= Top
  type E = List {type T <= Eq {type E >= z.T}}
}
subtype List <: Eq
// OK

name Tree {z =>
  type T <= Tree
  type E = List {type T <= Eq {type E >= z.T}}
}
subtype Tree {} <: List
// OK

let bad : List { type T <= Eq { type E >= Tree } } = new Tree { this =>
  type T = Tree
  type E = List {type T <= Eq {type E >= this.T}}
} in
/*
* no typing derivation in thesis rules
* no cycles in subtyping dependency graph in thesis rules
* typechecking diverges in master
* typechecking fails in more recent branches


(declared subtyping)       (stuck)
----------------           ---------------------------------------------------  (SR-CONS)
List -({})> Tree           {} <: { type T <= Eq { type E >= Tree } }
------------------------------------------------------------------------------- (S-NAME)
Tree {} <: List { type T <= Eq { type E >= Tree } }


Tree <: List

Tree <: List { type T <= Top }

Tree <: Tree { type T = Tree } <: List

*/


0
