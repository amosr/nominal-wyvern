// current compiler seems to not recognize float,string types


// fruits for sale
name Apple { a => 
  val id : Int
  val weight : Int
}
name Orange {  o =>
  val id : Int
  val weight : Int
}

// a flavor of apple
name McIntosh { mc => 
  val id : Int
  val weight : Int
}

// a product of Apple Inc
name Macintosh { ma => 
  val id : Int
  val weight : Int
  val model : Int
  val price : Int
}

subtype McIntosh <: Apple

//simple stock counter
name StockCounts { sc =>
  val numApples : Int
  val numOranges : Int
}

name StockTracker { st => 
  def empty () : StockCounts
  def importApple (a : Apple, st : StockCounts) : StockCounts
  def importOrange (o : Orange, st : StockCounts) : StockCounts
}

let a1 = new Apple {a => 
  val id : Int = 0
  val weight : Int = 90 
} 
in 
let o1 = new Orange {o => 
  val id : Int = 1 
  val weight : Int = 80 
} in 
let m1 = new McIntosh {mc => 
  val id  : Int = 2
  val weight : Int = 70
} in
let mac = new Macintosh {ma =>
  val id : Int = 3
  val weight : Int = 100
  val model : Int = 2
  val price : Int = 2000 
}

in

let one : Int = 1
in

let tracker = new StockTracker { st =>
  def empty () : StockCounts {
    new StockCounts { sc => 
      val numApples : Int = 0
      val numOranges : Int = 0
    }
  }
  def importApple ( a : Apple, stock : StockCounts) : StockCounts {
    // XXX: AMOS: lift stock.numApples binding to ensure ANF
    let nA = stock.numApples in
    new StockCounts {sc => 
      val numApples : Int =  nA.plus(one)
      val numOranges : Int = stock.numOranges
    }

  }
  def importOrange ( o : Orange, stock : StockCounts) : StockCounts {
    let nO = stock.numOranges in
    new StockCounts {sc => 
      val numApples : Int = stock.numApples
      val numOranges : Int = nO.plus(one)
    }
  }
}
in

let empty_stock = tracker.empty() in
let stock = tracker.importApple(a1, empty_stock) in //works
//let stock = tracker.importApple(o1, empty_stock) (fails correctly)
let stock = tracker.importApple(m1, empty_stock) in // sdf



Top




