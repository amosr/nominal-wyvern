type A {z =>
  type T >= Bot
}
type B {z =>
  type S <= Unit
  type T = A {type T >= B {type S = B {type S = z.S}}}
}
subtype B extends A
val bad : A {type T >= B {type S = Int}} = new B {type S = Int} {this =>
  type S = Int
  type T = A {type T >= B {type S = B {type S = this.S}}}
}
Unit

/*
B {type S = Int} <: A {type T >= B {type S = Int}}
type T >= B {type S = Int} <: type T = A {type T >= B {type S = B {type S = z.S}}}
B {type S = Int} <: A {type T >= B {type S = B {type S = z.S}}}
...
*/
