name Unit {z => }
name CreditCard {z => }
name SecuredCard {z => }
subtype SecuredCard <: CreditCard
name AuthorizedUserCard {z => }
subtype AuthorizedUserCard <: CreditCard

name Bank {b =>
  type Card <= Top
  def applyForCard(cardName:Int):b.Card
  def payOff(c:b.Card):Unit
}

name RegionalBank {b =>
  type Card <= SecuredCard
  def applyForCard(cardName:Int):b.Card
  def payOff(c:b.Card):Unit
}
subtype RegionalBank <: Bank

name Utils {z =>
  def giveChildren(card:SecuredCard):Unit
}

let pnc = new Bank {b =>
  type Card = CreditCard
  def applyForCard(cardName:Int):b.Card {
    new CreditCard {z =>}
  }
  def payOff(c:b.Card):Unit {
    new Unit {z =>}
  }
} in

let veryCautiousBank = new RegionalBank {b =>
  type Card = SecuredCard
  def applyForCard(cardName:Int):b.Card {
    new SecuredCard {z =>}
  }
  def payOff(c:b.Card):Unit {
    new Unit {z =>}
  }
} in

let one = 1 in
let myCard = veryCautiousBank.applyForCard(one) in
let pncCard = pnc.applyForCard(one) in
let legal = veryCautiousBank.payOff(myCard) in
//let illegal = pnc.payOff(myCard) in

let utils = new Utils {z =>
  def giveChildren(card:SecuredCard):Unit {
    new Unit {z =>}
  }
} in
let pass = utils.giveChildren(myCard) in
//let fail = utils.giveChildren(pncCard) in
pass
