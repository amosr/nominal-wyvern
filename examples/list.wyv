@shape name Monoid {z =>
  type T >= Bot
  val id : z.T
  def op(a:z.T, b:z.T):z.T
}

name List {z =>
  type T <= Top
  def foldr(m:Monoid {type T >= z.T}):m.T
}

name Nil {z =>
  type T <= Top
  def foldr(m:Monoid {type T >= z.T}):m.T
}
subtype Nil <: List

name Cons {z =>
  type T <= Top
  def foldr(m:Monoid {type T >= z.T}):m.T
  val head:z.T
  val tail:List {type T <= z.T}
}
subtype Cons <: List

name Param {z =>
  type A <= Top
}

name Utils {z =>
  def makeNil(a:Param):List {type T <= a.A}
  def makeCons(a:Param, x:a.A, xs:List {type T <= a.A}):Cons {type T <= a.A}
}

let utils = new Utils {z =>
  def makeNil(a:Param):List {type T <= a.A} {
    new Nil {type T <= a.A} {z =>
      type T = a.A
      def foldr(m:Monoid {type T >= z.T}):m.T {
        m.id
      }
    }
  }
  def makeCons(a:Param, x:a.A, xs:List {type T <= a.A}):Cons {type T <= a.A} {
    new Cons {type T <= a.A} {z =>
      type T = a.A
      def foldr(m:Monoid {type T >= z.T}):m.T {
        let tailVal : m.T = z.tail.foldr(m) in
        m.op(z.head,tailVal)
      }
      val head : a.A = x
      val tail : List {type T <= a.A} = xs
    }
  }
} in

let IntP = new Param {type A = Int} {this =>
  type A = Int
} in
let Sum = new Monoid {type T = Int} {z =>
  type T = Int
  val id : Int = 0
  def op(a:z.T, b:z.T):z.T {
    a.plus(b)
  }
} in
let TopM = new Monoid {type T = Top} {z =>
  type T = Top
  val id : Top = Top
  def op(a:z.T, b:z.T):z.T {
    a
  }
} in

let two = 2 in
let intNil : List {type T <= Int} = utils.makeNil(IntP) in
let l1 : List {type T <= Int} = utils.makeCons(IntP,two,intNil) in
let l2 : List {type T <= Int} = utils.makeCons(IntP,two,intNil) in
l2.foldr(Sum)
//l2.foldr(TopM) //supertypes allowed
