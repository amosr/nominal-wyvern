@shape type Monoid {z =>
  type T >= Bot
  val id : z.T
  def op(a:z.T, b:z.T):z.T
}

type List {z =>
  type T <= Unit
  def foldr(m:Monoid {type T >= z.T}):m.T
}

type Nil {z =>
  type T <= Unit
  def foldr(m:Monoid {type T >= z.T}):m.T
}
subtype Nil extends List

type Cons {z =>
  type T <= Unit
  def foldr(m:Monoid {type T >= z.T}):m.T
  val head:z.T
  val tail:List {type T <= z.T}
}
subtype Cons extends List

type Param {z =>
  type A <= Unit
}
type AA {z =>
  def makeNil(a:Param):List {type T <= a.A}
  def makeCons(a:Param, x:a.A, xs:List {type T <= a.A}):Cons {type T <= a.A}
}

val aa : AA = new AA {this =>
  def makeNil(a:Param):List {type T <= a.A} {
    new Nil {type T <= a.A} {z =>
      type T = a.A
      def foldr(m:Monoid {type T >= z.T}):m.T {
        m.id
      }
    }
  }
  def makeCons(a:Param, x:a.A, xs:List {type T <= a.A}):Cons {type T <= a.A} {
    new Cons {type T <= a.A} {z =>
      type T = a.A
      def foldr(m:Monoid {type T >= z.T}):m.T {
        val tailVal : m.T = z.tail.foldr(m)
        val ret : m.T = m.op(z.head,tailVal)
        ret
      }
      val head : a.A = x
      val tail : List {type T <= a.A} = xs
    }
  }
}

val IntP : Param {type A = Int} = new Param {type A = Int} {this =>
  type A = Int
}
val Sum : Monoid {type T = Int} = new Monoid {type T = Int} {z =>
  type T = Int
  val id : Int = 0
  def op(a:z.T, b:z.T):z.T {
    a+b
  }
}
val UnitM : Monoid {type T = Unit} = new Monoid {type T = Unit} {z =>
  type T = Unit
  val id : Unit = Unit
  def op(a:z.T, b:z.T):z.T {
    a
  }
}

val two : Int = 2
val intNil : List {type T <= Int} = aa.makeNil(IntP)
val l1 : List {type T <= Int} = aa.makeCons(IntP,two,intNil)
val l2 : List {type T <= Int} = aa.makeCons(IntP,two,intNil)
//l2.foldr(Sum)
l2.foldr(UnitM) //supertypes allowed
