// Modified from ../../moveable.wyv: make acyclic, remove shape

name IntPair {z =>
  val l:Int
  val r:Int
}
name Moveable {m =>
  type T <= Top
  def move(amt:IntPair):m.T
}
name Point {p =>
  type T = Point
  val x:Int
  val y:Int
  def move(amt:IntPair):p.T
}
subtype Point <: Moveable

name PointCons {pc =>
  def create(pos:IntPair):Point
}

name FMoveable {x =>
  // type T <= Moveable {type T <= x.T}
  type MT <= Moveable
  type T  = x.MT { type T = x.MT }
  val obj:x.T
}
name Utils {z =>
// XXX should return arg.T but can't
  def translate(arg:FMoveable):arg.T
}

name Vector2D {v =>
  type MT <= Vector2D
  type T   = Vector2D
  val x : Int
  val y : Int
  def move(amount:IntPair):v.T
}
subtype Vector2D <: Moveable

let utils = new Utils {this =>
  def translate(arg:FMoveable):arg.T {
    let p = new IntPair {z =>
      val l : Int = 1
      val r : Int = 1
    } in
// XXX should return arg.T but can't, obj.move unwraps arg.T to the arg.MT
    arg.obj.move(p)
  }
} in
let pointCons = new PointCons {pc =>
  def create(pos:IntPair):Point {
    new Point {p =>
      type MT = Point
      type T = Point
      val x : Int = pos.l
      val y : Int = pos.r
      def move(amt:IntPair):Point {
        let newp = new IntPair {z =>
          val l : Int = p.x.plus(amt.l)
          val r : Int = p.y.plus(amt.r)
        } in
        pc.create(newp)
      }
    }
  }
} in

let zz = new IntPair {z =>
  val l : Int = 0
  val r : Int = 0
} in

let origin = pointCons.create(zz) in
let fm = new FMoveable {xx =>
  type MT = Point
  type T = Point
  val obj : Point = origin
} in
utils.translate(fm)
