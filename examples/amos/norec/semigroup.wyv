/** Nominal Wyvern: semigroup example

 class Semigroup m where
   join :: m -> m -> m

 data SumInts = SumInts { count :: Int }
 instance Semigroup SumInts where
  join (SumInts i) (SumInts j) = SumInts (i + j)

 instance (Semigroup a, Semigroup b) => Semigroup (a,b) where
  join (a, b) (a', b') = (join a a', join b b')

 */

/** A semigroup, which has a "join" operation to combine elements. This type
 definition corresponds to a generic `Semigroup<T>` in Java. We declare
 semigroup to be a shape because we're going to inherit from it recursively.
 In Java, the recursive inheritance would look like something like a class
 `SumInts` extends `Semigroup<SumInts>`.
 */
@shape name Semigroup {z =>
  type T <= Top
  def join(that: z.T): z.T
}

name SumInts { z =>
  type T = SumInts
  def join(that: SumInts): SumInts
  val count: Int
}

subtype SumInts <: Semigroup

name Pair { z =>
  type A <= Semigroup { type T = z.A }
  type B <= Semigroup { type T = z.B }
  type T = Pair { type A = z.A, type B = z.B }

  def join(that: z.T): z.T

  val a: z.A
  val b: z.B
}

subtype Pair <: Semigroup

name MkSumInts { z =>
  def mkSum(i: Int): SumInts
  def mkSumRef(i: Int): GroupRef { type G = SumInts }
}

/**
 To construct a `Pair` semigroup, we need to be able to refer to the `A` and
 `B` semigroups. In Java we can write this as a generic method:
  >  <A extends Semigroup<A>, B extends Semigroup<B>> Pair<A,B> mkPair(A a, B b);

  It's a little harder to write this down as a reusable method in Nominal
  Wyvern. We can write a type definition like:

  name MkPairAB { z =>
    type A <= Semigroup { type T = z.A }
    type B <= Semigroup { type T = z.B }
    def mkPair(a: z.A, b: z.B): Pair { type A = z.A, type B = z.B }
  }

  but when we implement this, we need to commit to a particular semigroupâ€¦

*/
name GroupRef { z =>
  type G <= Semigroup { type T = z.G }
  val ref: z.G
}

name MkGroupRef { z =>
  def update(g: GroupRef, v: g.G): GroupRef { type G = g.G }
}


name MkPair { z =>
  def mk(a: GroupRef, b: GroupRef): Pair { type A = a.G, type B = b.G }
}

let mkGroupRef = new MkGroupRef { mkGroupRef =>
  def update(g: GroupRef, v: g.G): GroupRef { type G = g.G } {
    new GroupRef { type G = g.G } { z =>
      type G = g.G
      val ref: g.G = v
    }
  }
} in

let mkSumInts = new MkSumInts { mkSumInts =>
  def mkSum(i: Int): SumInts {
    new SumInts { z =>
      type T = SumInts
      def join(that: SumInts): SumInts {
        let ix: Int = i.plus(that.count) in
        let ss: SumInts = mkSumInts.mkSum(ix) in
        ss
      }
      val count: Int = i
    }
  }

  def mkSumRef(i: Int): GroupRef { type G = SumInts } {
    new GroupRef { type G = SumInts } { z =>
      type G = SumInts
      val ref: z.G = mkSumInts.mkSum(i)
    }
  }
} in
let mkPair = new MkPair { mkPair =>

   def mk(a: GroupRef, b: GroupRef): Pair { type A = a.G, type B = b.G } {
    new Pair { type A = a.G, type B = b.G } { z =>
      type A = a.G
      type B = b.G

      type T = Pair { type A = a.G, type B = b.G }

      def join(that: z.T): z.T {
        let aa: a.G = a.ref.join(that.a) in
        let ag: GroupRef { type G = a.G } = mkGroupRef.update(a, aa) in
        let bb: b.G = b.ref.join(that.b) in
        let bg: GroupRef { type G = b.G } = mkGroupRef.update(b, bb) in
        let p: z.T = mkPair.mk(ag, bg) in
        p
      }

      val a: a.G = a.ref
      val b: b.G = b.ref

    }
  }
} in

0
