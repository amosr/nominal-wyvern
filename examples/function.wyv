type Function {f =>
  type A <= Unit
  type B <= Unit
  def apply(a:f.A):f.B
  //def compose(g:Function {type A = f.B}):Function {type T = f.A, type B = g.B}
}

val add1 : Function {type A = Int, type B = Int} = new Function {type A = Int, type B = Int} {z =>
  type A = Int
  type B = Int
  def apply(a:z.A):z.B {
    val one : Int = 1
    a + one
  }
}

type Functor {z =>
  type T <= Unit
  def fmap(fn:Function,a:Functor {type T = fn.A}):Functor{ type T = fn.B}
}

type Maybe {z =>
  type U <= Unit
}

type Nothing {z =>
  type U <= Unit
}
subtype Nothing extends Maybe

type Just {z => 
  type U <= Unit
  val x:z.U
}
subtype Just extends Maybe

Unit
